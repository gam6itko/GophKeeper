name: build

on:
  push:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        arch: [ amd64 ]
#      matrix:
#        os: [ linux, windows, darwin ]
#        arch: [ amd64, 386 ]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Check out code
        uses: actions/checkout@v4

      - name: Download dependencies
        run: go mod download

      - name: Generate builder values
        id: values
        run: |
          echo "version=$(echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//')" >> $GITHUB_OUTPUT
          echo "timestamp=$(echo $(date +%FT%T%z))" >> $GITHUB_OUTPUT
          echo "binary-ext=$(echo $(echo `[ ${{ matrix.os }} = 'windows' ] && echo '.exe'`))" >> $GITHUB_OUTPUT

      - name: Compile binary file
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CLIENT_LDFLAGS: >-
            -X "github.com/gam6itko/goph-keeper/internal/client/tui/root/model.buildVersion=${{ steps.values.outputs.version }}
            -X "github.com/gam6itko/goph-keeper/internal/client/tui/root/model.buildDate=${{ steps.values.outputs.timestamp }}
        run: |
          go build -ldflags "$CLIENT_LDFLAGS" -o "./client_${{ matrix.os }}_${{ matrix.arch }}${{ steps.values.outputs.binary-ext }}" ./cmd/client
          go build -o "./server_${{ matrix.os }}_${{ matrix.arch }}${{ steps.values.outputs.binary-ext }}" ./cmd/server

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.dist-dir.outputs.name }}
          path: ${{ steps.dist-arch.outputs.name }}
          if-no-files-found: error
          retention-days: 30
